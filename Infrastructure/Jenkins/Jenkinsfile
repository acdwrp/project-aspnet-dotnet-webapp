pipeline {
  agent {
    node {
      label 'win'&&'slave'
      customWorkspace "workspace\\${JOB_NAME.replace("%2F", "_")}"
    }

  }
  stages {
    stage('Build') { 
      steps {

        echo "Test"

        script{
          def props = readJSON file: "Infrastructure/Jenkins/DeploymentConfig.json"

          echo props.AWSBucket
        }

        script {
          def authors = currentBuild.changeSets.collectMany { it.toList().collect { it.author } }.unique()
          authors.each {println "RPM:  ${it}"}
        }

        bat "nuget restore ${SolutionName}"
        bat "\"${tool 'MSBuild'}\" ${SolutionName} /p:Configuration=Release /p:Platform=\"Any CPU\" /p:ProductVersion=1.0.0.${env.BUILD_NUMBER}"
      }
    }
    stage('Test') {
      steps {
        echo 'Testing..'
      }
    }
    stage('Package Artifacts') {
      steps {
        zip(glob: ArtifactsToPack, zipFile: ZipPackageName)
        archiveArtifacts(artifacts: ZipPackageName, onlyIfSuccessful: true, fingerprint: true)
      }
    }
    stage('Push to artifact storage') {
      when {
        branch 'master'
      }
      steps {

        echo "DDD"

        deployToS3 file: "AAA" 


        withAWS(credentials: 'AWSCredentials', region: 'eu-west-1') {
          timeout(time: 3, unit: 'MINUTES') {
            retry(count: 5) {
              s3Upload(file: ZipPackageName, bucket: AWSBucket, path: "${WorkspaceName}/${ZipPackageName}")
            }

          }

        }

      }
    }
    stage('Deploy to Test')
    {
steps{
echo "Testing"
}
    }
    stage('Run smoke tests'){
steps{
  echo "Testing"
}
    }
    stage('Run API tests'){
steps{
 echo "Testing" 
}
    }
    stage('Run stress tests'){
steps{
  echo "Testing"
}
    }
  }
  environment {
    AWSBucket = 'test.sample.internal.depolyment'
    AWSCredentials = 'AWSCredentials'
    StashedPackage = 'Package'
    ZipPackageName = 'package.zip'
    WorkspaceName = JOB_NAME.replace("%2F", "_")
    SolutionName = 'SampleWebApplication.sln'
    ArtifactsToPack = '/SampleWebApplication/bin/*.*'
    DepolymentProperties = readJSON file: "Infrastructure/Jenkins/DeploymentConfig.json"
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    timeout(time: 20, unit: 'MINUTES')
  }
}